@page "/deletejogo/{id:int}"
@using MyFavoriteThings.Data;
@inject HttpClient http
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Env

<h3>Apagar Jogo</h3>
<hr />

<h2>Confirma Exclusão ?</h2>
<p>Deseja realmente deletar este jogo com Id: <b> @id</b></p>
<br />
<Aviso Exibir="Exibir">
    <strong>@Mensagem</strong>
</Aviso>
<div class="col-12">
    <table class="table">
        <tr>
            <td>Titulo</td>
            <td>@jogo.Titulo</td>
        </tr>
        <tr>
            <td>Capa</td>
            <td>@jogo.Capa</td>
        </tr>
        <tr>
            <td>Data de Lançamento</td>
            <td>@jogo.DataLancamento</td>
        </tr>
    </table>
    <div class="form-group">
        <input type="button" value="Apagar" @onclick="@Delete" class="btn btn-primary" />
        <input type="button" value="Cancelar" @onclick="@Cancel" class="btn btn-primary" />
    </div>
</div>

@code {
    bool Exibir = false;

    [Parameter]
    public string Mensagem { get; set; }

    [Parameter]
    public int id { get; set; }

    Jogo jogo = new Jogo();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            jogo = await http.GetJsonAsync<Jogo>("/api/jogos/" + id);
        }
        catch (Exception ex)
        {
            Exibir = true;
            if (Env.IsDevelopment())
            {
                Mensagem = "Erro ao acessar os dados ...\n" + ex.StackTrace.ToString();
            }
            else
            {
                Mensagem = "Não foi possível acessar o jogo ...";
            }
        }
    }
    protected async Task Delete()
    {
        try
        {
            await http.DeleteAsync("/api/jogos/" + id);
            NavigationManager.NavigateTo("jogos");
        }
        catch (Exception ex)
        {
            Exibir = true;
            if (Env.IsDevelopment())
            {
                Mensagem = "Erro ao acessar os dados ...\n" + ex.StackTrace.ToString();
            }
            else
            {
                Mensagem = "Não foi possível excluir o jogo ...";
            }
        }
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("jogos");
    }
}
