@page "/series"
@using MyFavoriteThings.Data.Models;
@using Microsoft.AspNetCore.WebUtilities;
@using MyFavoriteThings.Helpers;
@using System.Linq;
@inject HttpClient  http
@inject NavigationManager navManager

<h3>Séries</h3>

<p class="mt-3">
    <a href="/addserie" class="btn btn-primary">Criar Nova Série</a>
</p>

@if (series == null)
{
    <p>Loading...</p>
}
else
{
    <div class="d-block mt-3 mb-3">
        <button class="btn btn-primary btntypetable" id="btntypetable" @onclick='(() => changeType("table"))'>Table</button>
        <button class="btn btn-primary btntypecard" id="btntypecard" @onclick='(() => changeType("card"))'>Card</button>
    </div>

    if (type == "card")
    {
        <div class="f-container">
            <div class="row justify-content-center align-items-center">
                @foreach (var serie in series)
                {
                    <div class="col-12 col-md-6 col-lg-6 col-xl-4 card p-0">
                        <a href="@serie.Capa" target="_blank">
                            <img src="@serie.Capa" class="card-img-top mx-auto" alt="@serie.Titulo" />
                        </a>
                        <div class="card-body">
                            <h3 class="text-center">@serie.Titulo (id: @serie.SerieId)</h3>
                            <p class="text-center">Data de lançamento: @serie.DataLancamento.ToShortDateString()</p>
                            <p class="text-center">Favorito: @serie.IsYourFavorite</p>
                            <div class="d-block mx-auto text-center mt-3">
                                <a href='/editserie/@serie.SerieId' class="btn btn-primary">Editar</a>
                                <a href='/deleteserie/@serie.SerieId' class="btn btn-danger">Apagar</a>
                            </div>
                        </div>
                    </div>
                }
                <div class="clearfix"></div>
            </div>
        </div>
    }
    else
    {
        <div class="srchblk mb-3">
            <h3>Procurar</h3>
            <div class="row">
                <div class="col-6">
                    <select class="custom-select" @bind="selectedValue">
                        <option value="SerieId">SerieId</option>
                        <option value="Titulo">Titulo</option>
                    </select>
                </div>

                <div class="col-6">
                    <input type="text" class="form-control" @oninput="@OnSearchChanged" />
                </div>

                <div class="clearfix"></div>
            </div>
        </div>

        <div class="table-responsive">
            <table class='table'>
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Titulo</th>
                        <th>Capa</th>
                        <th>Data de Lançamento</th>
                        <th>Favorito</th>
                        <th>CRUD Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var serie in series)
                    {
                        <tr>
                            <td>@serie.SerieId</td>
                            <td>@serie.Titulo</td>
                            <td>@serie.Capa</td>
                            <td>@serie.DataLancamento</td>
                            <td>@serie.IsYourFavorite</td>
                            <td>
                                <a href='/editserie/@serie.SerieId' class="btn btn-primary">Editar</a>
                                <a href='/deleteserie/@serie.SerieId' class="btn btn-danger">Apagar</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@code {
    public string type { get; set; } = "table";
    string selectedValue { get; set; } = "Titulo";

    Série[] series;

    protected override async Task OnInitializedAsync()
    {
        series = await http.GetJsonAsync<Série[]>("/api/series");
        type = getType();
    }

    void changeType(string typestr)
    {
        var query = new Dictionary<string, string> {
            { "type", typestr }
        };
        type = query["type"];
        navManager.NavigateTo(QueryHelpers.AddQueryString("/series", query));
    }

    public string getType()
    {
        return ExtensionMethods.QueryString(navManager, "type");
    }

    async Task OnSearchChanged(ChangeEventArgs args)
    {
        string values = args.Value.ToString();
        await seriesFilteringList(values, selectedValue);
    }

    protected async Task seriesFilteringList(string value, string columnName)
    {
        series = await http.GetJsonAsync<Série[]>("/api/series/");

        if (value.Trim().Length > 0)
        {
            switch (columnName)
            {
                case "SerieId":
                    series = series.Where(x => x.SerieId == int.Parse(value)).ToArray();
                    break;
                case "Titulo":
                    series = series.Where(x => x.Titulo.Contains(value)).ToArray();
                    break;
                default:
                    series = await http.GetJsonAsync<Série[]>("/api/series/");
                    break;
            }
        }
        else
        {
            series = await http.GetJsonAsync<Série[]>("/api/series/");
        }
    }
}
